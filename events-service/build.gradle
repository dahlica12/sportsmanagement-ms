plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'io.freefair.lombok' version '6.6.1'
	id 'jacoco'
}

group = 'com.sportsmanagement.eventservice'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '17'


ext {
	mapstructVersion = "1.5.3.Final"
	lombokVersion = "1.18.26"
	lombokMapstructBindingVersion = "0.2.0"

}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
			"org.projectlombok:lombok:${lombokVersion}",
			"org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring30x:4.6.2'

}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	dependsOn test

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
//"com/movielister/**/MovieDetailsServiceApplication.class",
// "**/*MapperImpl.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.00
			}
		}
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

